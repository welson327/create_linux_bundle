require_relative 'LOTTO'
require_relative 'LottoUtil'
require_relative 'Lotto3'
require_relative 'LottoEngine'

def time_elapsed(msg)
    t1 = Time.now
    printf("\n\n\n");
    puts "Start @ #{t1}, task: #{msg}"
    yield
    t2 = Time.now
    puts "End   @ #{t2}, time elapsed = #{t2-t1}"
end

class Lotto3Test
public
    # prize_type
    WIN_EXACT = 0   # 正彩
    WIN_3ASM  = 1   # 3組彩
    WIN_6ASM  = 2   # 6組彩
    WIN_2 	  = 3   # 對彩 $750
    WIN_22 	  = 4   # 對彩 $750*2
    NONE      = -1
    
public
    def initialize(play_type)
        @play_type = play_type
		@lotto = LOTTO.new
        @lotto.dim = 3
        @lotto.range = 9
		@curr_data = Lotto3.new.curr_data
		@game = nil
		@filter = nil
		
        @engine = LottoEngine.new("3", @curr_data)
        @engine.set_advance_prediction(true)
        @engine.init
        @engine.report
    end

    # ========================================================
    # Purpose:      正彩: 拾位數包一碼，百/個位數各包7~8碼
    #               對彩: 拾位數包一碼，連同百/個位數包成十組
    # Parameter:   
    # Return:
    # Remark:      
    # Revision:
    # ======================================================== 
    def get_invest_numbers
        invest_nums = []
        case @play_type
            when WIN_EXACT
                # 3d array
                ot_nums = @engine.get_politic_3star_numbers
                invest_nums = ot_nums[0].product(ot_nums[1]).product(ot_nums[2]).collect{|v| v.flatten}
            
            when WIN_2
                ot_nums = @engine.get_politic_3star_numbers
                second_nums = ot_nums[1]
                invest_nums = []
                second_nums.each do |magic_num|
                    0.upto(9) do |i|
                        arr = []
                        arr.push(i)
                        arr.push(magic_num)
                        arr.push(i)
                        invest_nums.push(arr)
                    end
                end
        end
        return invest_nums
    end
    
    # ========================================================
    # Purpose:     
    # Parameter:    Bean nth_game
    #               Array[] ot_num: 對照組(已開的)/實驗組(預測的)
    # Return:
    # Remark:      
    # Revision:
    # ========================================================      
    def get_profit(nth_game, ot_nums)
        bonus = 0
        cost = 0
            
        ot_nums.each do |ot_num|
            cost += 25
            prize_type = check_prize_type(nth_game, ot_num);
            case(prize_type)
                when WIN_EXACT
                    bonus += 12500;
                when WIN_2
                    bonus += 750;
                when WIN_22
                    bonus += 1500;
                else
                    bonus += 0
            end
        end
        return (bonus - cost), cost
    end
    
    def run_test
        coming_game = nil
        drops = 200
        
        total_profit = 0
        total_cost = 0
        len = @curr_data.length
        invest_cnt = 0
        
        # check match cnt
        for i in 1..drops
            coming_game = @curr_data[len-i];
            prev_game = @curr_data[len-i-1];
            printf("\n\n>>> Drops: %d\n", i);
            printf("coming_game info: "); coming_game.info();
            printf("prev_game info: "); prev_game.info();
            @engine.set_drop_number(i)
            @engine.reset
            #@engine.report
            
            invest_nums = get_invest_numbers
            puts "invest_nums=#{invest_nums}"
            
            profit, cost = get_profit(coming_game, invest_nums)
            printf("profit/cost = %d/%d\n", profit, cost)

			total_profit += profit
			total_cost += cost
            invest_cnt += 1 if invest_nums.length > 0
        end

        printf("\n\n\n")
        printf(">>> [Test Runs: %d]\n", drops)
        printf(">>> total profit/cost/invest_cnt = %d/%d/%d\n", total_profit, total_cost, invest_cnt)
        printf(">>> total ROI = %.1f%%\n", 100*total_profit.to_f/total_cost)
        #@engine.info()    
    end

private
    # ========================================================
    # Purpose:     
    # Parameter:   	Bean bean: Control Group, 
    #				int ot_num[]: Experiment Group
    # Return:
    # Remark:      	ot_num: numbers generated by OT  
    # Revision:
    # ========================================================
    def check_prize_type(bean, ot_num)
        draw_num = bean.getDrawNum
        case @play_type
            when WIN_EXACT
                if(draw_num[0]==ot_num[0]  && 
                   draw_num[1]==ot_num[1]  &&
                   draw_num[2]==ot_num[2]  )
                   return WIN_EXACT
                end
            when WIN_2
                if ((draw_num[0]==ot_num[0]  &&  draw_num[1]==ot_num[1]) &&
                    (draw_num[2]==ot_num[2]  &&  draw_num[1]==ot_num[1]) )
                   return WIN_22
                elsif ((draw_num[0]==ot_num[0]  &&  draw_num[1]==ot_num[1]) ||
                       (draw_num[2]==ot_num[2]  &&  draw_num[1]==ot_num[1]) )
                    return WIN_2
                end
            else
                return NONE
        end
    end     
end


printf("\n\n ======================================== \n");
printf("3star info: \n");
ltest = Lotto3Test.new(3)
time_elapsed "run_test: WIN_EXACT" do
    ltest.run_test
end
